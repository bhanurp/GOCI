template:
  namespace: bhanurp
  name: GOCI
  version: 1.0.0
  development: true

valuesFilePath: values.yml

# Template Variables Section
# -----------------------------------------------------------------------------------------
{{ $templateId := .Values.metadata.templateId }}
{{ $os := default "linux" .Values.metadata.os }}
{{ $stepType := ternary "PowerShell" "Bash" (eq $os "windows") }}
{{ $gitResName := print $templateId "_git_source" }}
{{ $codeAnalysisResourceName := print $templateId "_code_quality_result" }}
{{ $buildInfoResultResName := print $templateId "_build_result" }}
{{ $buildInfoResName := print $templateId "_build_info" }}
{{ $cronResName := print $templateId "_cron" }}
{{ $pipelineName := print $templateId "_build" }}
{{ $rootDirectory := ternary (print "/" .Values.configurations.sourceDirectory) "" (not (eq "" .Values.configurations.sourceDirectory)) }}

# Git repo resource
{{ define "res.gitRepo.config" }}
  {{ range $key, $value := .Values.inputs.sourceRepository }}
  {{ $isObject := or (eq $key "files") (eq $key "branches") (eq $key "pullRequestSourceBranches") (eq $key "pullRequestTargetBranches") (eq $key "tags") (eq $key "buildOn") (eq $key "cancelPendingRunsOn") (eq $key "pin") }}
  {{ if (eq $isObject false )}}
      {{ $key }}: {{ $value }}
  {{ else }}
      {{ $key }}:
  {{ range $depthKey, $depthValue := $value }}
        {{ $depthKey }}: {{ $depthValue }}
  {{ end }}
  {{ end }}
  {{ end }}
{{ end }}

# Notifications
{{ $isNotificationsAvailable := default false .Values.notifications }}
{{ $isEmailNotificationsAvailable := default false (and $isNotificationsAvailable .Values.notifications.email) }}
{{ $isSlackNotificationsAvailable := default false (and $isNotificationsAvailable .Values.notifications.slack) }}

# -----------------------------------------------------------------
# Reusable templates
# These are resolved using 'template' thus indentation is important
# -----------------------------------------------------------------
{{ $resultResources := dict "$codeAnalysisResourceName" $codeAnalysisResourceName "buildInfoResultResName" $buildInfoResultResName }}
{{ $templateParams := merge $resultResources (dict "values" .Values "gitResName" $gitResName "rootDirectory" $rootDirectory "stepType" $stepType) }}

# Git repo resource
{{ define "res.gitRepo.config" }}
{{ range $key, $value := .Values.inputs.sourceRepository }}
{{ $isObject := or (eq $key "files") (eq $key "branches") (eq $key "pullRequestSourceBranches") (eq $key "pullRequestTargetBranches") (eq $key "tags") (eq $key "buildOn") (eq $key "cancelPendingRunsOn") (eq $key "pin") }}
{{ if (eq $isObject false )}}
{{ $key }}: {{ $value }}
{{ else }}
{{ $key }}:
{{ range $depthKey, $depthValue := $value }}
{{ $depthKey }}: {{ $depthValue }}
{{ end }}
{{ end }}
{{ end }}
{{ end }}

{{ $isControlsAvailable := default false .Values.controls }}
{{ $isTriggerByAvailable := default false (and $isControlsAvailable .Values.controls.triggerBy) }}
{{ $isGitTriggerEnabled := default false (and $isTriggerByAvailable (eq .Values.controls.triggerBy.sourceRepository true)) }}
{{ $isExternalTriggerAvailable := default false (and $isTriggerByAvailable .Values.controls.triggerBy.externalResources) }}
{{ $isCronTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.cron (eq .Values.controls.triggerBy.cron.enabled true)) }}
{{ $isWebhookTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.incomingWebhooks) }}

# Steps shared template
{{ define "step.shared.onExecute.command" }}
  {{ $ := . }}
    {{ if $.conf }}
    {{- range $cmd := $.conf.commands }}
    - {{ $cmd }}
    {{- end }}
{{ end }}

# Update current timestamp in result resource
  {{ if eq $.stepType "linux" }}
- STEP_TIMESTAMP=$(date +%s)
  {{ else }}
- $STEP_TIMESTAMP=[int](Get-Date -UFormat %s -Millisecond 0)
  {{ end }}
- write-output {{ $.resultResource }} "timestamp=$STEP_TIMESTAMP"
  {{ end }}

# code quality step
{{ define "step.codeAnalysis.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.codeAnalysis }}
  {{ $ := set $ "resultResource" $.codeAnalysisResName }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
  {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# analysis
{{ define "step.analysis.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.analysis }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
  {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# lint step
{{ define "step.lint.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.lint }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
  {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# scan step
{{ define "step.scan.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.scan }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
  {{ if eq $.stepType "windows" }}
  - powershell "Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'"; jf intro
  {{ else }}
  - curl -fL https://install-cli.jfrog.io | sh
  {{ end }}
  {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# build step
{{ define "step.build.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.build }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
  {{ if eq $.stepType "windows" }}
  - powershell "Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'"; jf intro
  {{ else }}
  - curl -fL https://install-cli.jfrog.io | sh
  {{ end }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
  {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# automation step
{{ define "step.automation.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.automation }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
    {{ template "step.shared.onExecute.command" $ }}
{{ end }}

# publish step
{{ define "step.publish.onExecute" }}
  {{ $ := . }}
  {{ $ := set $ "conf" $.values.configurations.steps.publish }}
  {{ $ := set $ "resultResource" $.buildInfoResultResName }}
  - cd ${res_{{ $.gitResName }}_resourcePath}{{ $.rootDirectory }}
  {{ if eq $.stepType "windows" }}
  - powershell "Start-Process -Wait -Verb RunAs powershell '-NoProfile iwr https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/[RELEASE]/jfrog-cli-windows-amd64/jf.exe -OutFile $env:SYSTEMROOT\system32\jf.exe'"; jf intro
  {{ else }}
  - curl -fL https://install-cli.jfrog.io | sh
  {{ end }}
  {{ template "step.shared.onExecute.command" $ }}
  - write_output {{ $.resultResource }} "buildName=$JFROG_CLI_BUILD_NAME"
  - write_output {{ $.resultResource }} "buildNumber=$JFROG_CLI_BUILD_NUMBER"
{{ end }}

{{ define "step.shared.failure" }}
  {{ $ := . }}
  {{ if $isSlackNotificationsAvailable }}
    - send_notification  {{ .Values.notifications.slack.integrationName }} --text "Successful Pipeline - $pipeline_name | Step - $step_name \n Committer - <$committer> \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url"
  {{ end }}
{{ end }}
# -----------------------------------------------------------------------------------------

# Resource definition
resources:
  - name: {{ $gitResName }}
    type: GitRepo
    configuration:
      {{ template "res.gitRepo.config" . }}
    
  - name: {{ $codeAnaResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $unitTestResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $buildInfoResultResName }}
    type: PropertyBag
    configuration:
      timestamp: ''

  - name: {{ $buildInfoResName }}
    type: BuildInfo
    configuration:
      sourceArtifactory: {{ .Values.inputs.integrations.artifactory }}
      buildName: ''
      buildNumber: ''

  {{ if $isCronTriggerEnabled }}
  - name: {{ $cronResName }}
    type: CronTrigger
    configuration:
      interval: '{{ .Values.controls.triggerBy.cron.expression }}'
  {{ end }}

  {{ if $isWebhookTriggerEnabled }}
  {{ - range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
  - name: "{{ $templateId }}_webhook_{{ $webhook.webhookName }}"
    type: IncomingWebhook
    configuration:
      webhookName: {{ $webhook.webhookName }}
  {{ end }}
  {{ end }}

# pipelines section
pipelines:
  - name: {{ $pipelineName }}
    configuration:
      runtime:
        type: image
        image:
          {{ if .Values.metadata.runtime }}
          custom:
          {{ range $key, $value := .Values.metadata.runtime }}
            {{ $key }}: {{ $value }}
          {{ end }}
          {{ else }}
          auto:
            language: go
            versions:
              - {{ .Values.metadata.goVersion }}
          {{ end }}
      {{ if .Values.metadata.nodePool }}
      nodePool: {{ .Values.metadata.nodePool }}
      {{ end }}
      integrations:
        - name: {{ .Values.inputs.integrations.artifactory }}
        {{ if $isEmailNotificationsAvailable }}
        - name: {{ .Values.notifications.email.integrationName }}
        {{ end }}
        {{ if $isSlackNotificationsAvailable }}
        - name: {{ .Values.notifications.slack.integrationName }}
        {{ end }}
    steps:
      - name: trigger_all
        type: {{ $stepType }}
        {{ if (or $isExternalTriggerAvailable $isCronTriggerEnabled $isWebhookTriggerEnabled) }}
        configuration:
          inputResources:
            # Enable trigger options via external resources
              {{ if $isExternalTriggerAvailable }}
              {{ - range $resource := .Values.controls.triggerBy.externalResources }}
              - name: '{{ $resource.resourceName }}'
              {{ - end }}
              {{ end }}

              # Enable cron trigger
              {{ if $isCronTriggerEnabled }}
              - name: {{ $cronResName }}
              {{ end }}

              # Enable incoming webhook triggers
              {{ if $isWebhookTriggerEnabled }}
              {{ - range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
              - name: "{{ $templateId }}_webhook_{{ $webhook.webhookName }}"
              {{ end }}
              {{ end }}
        {{ end }}
        execution:
          onExecute:
            - end_step success
          onFailure:
            {{ template "step.shared.failure" $templateParams }}

      - name: code_analysis
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $codeAnalysisResourceName }}
        execution:
          onExecute:
            {{ template "step.test.onExecute" $templateParams }}
          onFailure:
            {{ template "step.shared.failure" $templateParams }}

      - name: lint
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: trigger_all
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $codeAnalysisResourceName }}
        execution:
          onExecute:
            {{ template "step.lint.onExecute" $templateParams }}
          onFailure:
            {{ template "step.shared.failure" $templateParams }}

      - name: go_build
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: code_analysis
            - name: lint
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
          outputResources:
            - name: {{ $buildInfoResultResName }}
        execution:
          onExecute:
            {{ template "step.build.onExecute" $templateParams }}
          onFailure:
            {{ template "step.shared.failure" $templateParams }}

      - name: xray_scan
        type: {{ $stepType }}
        configuration:
          inputResources:
            - name: {{ $buildInfoResultResName }}
          outputResources:
            - name: {{ $xrayScanOutputResource }}
        execution:
          onExecute:
            {{ template "step.scan.onExecute" $templateParams }}
          onFailure:
            {{ template "step.shared.failure" $templateParams }}

      - name: automation_test
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: go_build
          inputResources:
            - name: {{ $gitResName }}
          outputResources:
            - name: {{ $automationResultResName }}
        execution:
          onExecute:
            {{ template "step.automation.onExecute" $templateParams }}
          onFailure:
            {{ template "step.shared.failure" $templateParams}}

      - name: go_publish
        type: {{ $stepType }}
        configuration:
          inputSteps:
            - name: automation_test
            - name: xray_scan
          inputResources:
            - name: {{ $gitResName }}
        execution:
          onExecute:
            {{ template "step.publish.onExecute" $templateParams }}
          onComplete:
            {{ if $isSlackNotificationsAvailable }}
            - send_notification  {{ .Values.notifications.slack.integrationName }} --text "Successful Pipeline - $pipeline_name | Step - $step_name \n Committer - <$committer> \n Commit - $res_auto_gitRepo_commitSha $res_auto_gitRepo_commitMessage \n Branch - $res_auto_gitRepo_branchName \n URL - $step_url"
            {{ end }}
