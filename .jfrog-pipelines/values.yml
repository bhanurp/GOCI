# [Required]
metadata:
  # [Required] An unique ID used across template to identify resources and pipelines uniquely
  templateID: myApp

  # [Optional] If not provided latest go version will be picked
  goVersion: 1.19.8

  # [Optional]
  os: linux

  # [Optional] Defaults to Ubuntu18 with go
  # Allows to configure custom runtime, support all the configuration properties under runtime.image.custom
  # Ref: https://jfrog.com/help/r/jfrog-pipelines-documentation/choosing-your-runtime-image
  #  runtime:
  #    registry: docker
  #    sourceRepository: apps-docker-local
  #    name: test.jfrog.io/apps-docker-local/ci/builder-node14
  #    tag: 1.0.0

  # [Optional] If not provided then default nodePool configured in platform will be used
  #  nodePool: some_nodepool

# [Required]
inputs:
  # [Required] Configure Git repository where application code is present
  sourceRepository:
    # Support all the Git Resource configuration properties
    # Ref: https://jfrog.com/help/r/jfrog-pipelines-documentation/gitrepo
    path: bhanurp/go-app
    gitProvider: gh_int_bhanu
    branches:
      include: main
    buildOn:
      commit: true

  # [Required]
  integrations:
    # [Required] Artifactory api key to configure Jfrog CLI
    artifactory: int_default_artifactory

# [Required]
configurations:
  sourceDirectory: ""
  # [Optional] Artifactory target repository to upload binary
  targetRepository: "go-local"

  steps:
    # performs go lint
    lint:
      commands:
        - go install golang.org/x/lint/golint@latest
        - golint ./...
        # use any other linter suitable like revive

    # code analysis step
    analysis:
      commands:
        - go vet ./...
        # installs static check and performs static check analysis on source code excludes tests
        - go install honnef.co/go/tools/cmd/staticcheck@latest
        - staticcheck -tests=false ./...
        # installs gosec and performs go security checks
        - go install github.com/securego/gosec/v2/cmd/gosec@latest
        # exclude or include rules refer https://github.com/securego/gosec
        - gosec ./...

    #  runs unit test cases, downloads dependencies, performs mod tidy, performs build publish
    build:
      commands:
        - go test ./...
        - go mod download
        - go mod tidy
        - go build -o $appName
        - add_run_files $appName appBinary
        - curl -fL https://install-cli.jfrog.io | sh
        - jf rt build-publish ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER}

    # does xray scan by checking if xray is available
    scan:
      commands:
        - check_xray_available
        - jf --version
        - curl -fL https://install-cli.jfrog.io | sh
        - jf bs --fail=true $BuildName $BuildNumber

    # placeholder for running automation suite
    automation:
      commands:
        - end_step success

    # publish the build to artifactory
    publish:
      commands:
        - jf --version
        - curl -fL https://install-cli.jfrog.io | sh
        - restore_run_files appBinary $appName
        - ls
        - jf rt upload $appName $targetRepository --build-name=$buildName --build-number=$buildNumber --flat=true --fail-no-op=true --detailed-summary

controls:
  # [Optional] Feature to control the pipeline trigger options, defaults to `sourceRepository`
  # Whole pipeline from frogbot-scan will be triggered
  triggerBy: 

  # Connected source Git repository change [Defaults to true]
  # sourceRepository: true

  # Other resource change from other pipelines
  # externalResources:
  #   - resourceName: dream_app_commons_build_result

  # Automated periodic triggers (Typical use case: Nightly builds)
  # cron:
  #   enabled: true # Defaults to false
  #   expression: "*/3 * * * *" # No defaults, mandatory to provide when cron.enabled is set to true

  # Incoming webhook
  # incomingWebhooks:
  #   - webhookName: 'testWebhook' # IncommingWebhook integration name

# [Optional] Send updates of your pipeline status via below methods
notifications:
  email:
    integrationName: "int_smtp"

  slack:
    integrationName: "int_slack"
